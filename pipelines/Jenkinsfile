pipeline {
    agent {
        docker {
            label 'docker'
            image "devops45of/jenkins:agent-ci"
            args '-u 0:0 -v /var/run/docker.sock:/var/run/docker.sock'
            alwaysPull true


        }
    }
    environment {
        registry = "devops45of/jenkins"
        registryCredential = 'dockerhub_token'
        containerId = ''
    }
    
    stages {
        stage('Clone') {
            steps {
                checkout scm
            }
        }
        
        stage('Verify') {
            steps {
                sh '''
                source /venv/bin/activate
                python3 -m pylint --output-format=parseable --disable=E0401 --fail-under=5 app/app.py
                '''
            }
        }
        
        stage('Building image') {
            steps {
                script {
                    sh 'docker build -t ${registry}:${BUILD_NUMBER} -t ${registry}:latest .'
                }
            }
        }
        stage('test Container') {
            steps {
                script {
                    containerId = sh(script: "docker run -d -p 8000:8000 --name app ${registry}:${BUILD_NUMBER}", returnStdout: true).trim()
                    echo "Container ID: ${containerId}"
                    // Check if container is running
                    sh '''
                    export run=true
                    while $run
                    do
                        # Get the status of the container
                        status=$(docker inspect -f '{{.State.Status}}' app)

                        if [ "$status" = "running" ]; then
                            run=false
                        elif [ "$status" = "exited" ]; then
                            exit 1
                        else
                            sleep 2
                        fi
                    done

                    source /venv/bin/activate
                    python3 app/test.py
                    '''
                }
            }
        }
        
        stage('Push our image') {
            steps {
                script {
                    docker.withRegistry('', registryCredential) {
                        sh 'docker push --all-tags ${registry}'
                    }
                }
            }
        }
        
        stage('Trigger ArgoCD') {
            when {
                expression {
                    env.GIT_BRANCH == 'origin/main'
                }
            }
            steps {
                script {
                    build job: 'argocd',
                        parameters: [
                            string(name: 'NAMESPACE', value: "prod"),
                            string(name: 'DIR', value: "deploy"),
                            string(name: 'TAG', value: "${BUILD_NUMBER}")
                        ]
                }
            }
        }
    }
    
    post {
        always {
            script {
                sh "docker stop ${containerId} && docker rm ${containerId} && docker rmi  ${registry}:${BUILD_NUMBER}"
            }
        }
        success {
            script {
                slackSend(channel: "pipeline", message: "Pipeline passed successfully - image: ${registry}:${BUILD_NUMBER}")
            }
        }
        failure {
            script {
                slackSend(channel: "pipeline_fail", message: "Pipeline failed")
            }
        }
    }
}


